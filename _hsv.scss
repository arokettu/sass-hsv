@use 'sass:math';
@use 'sass:list';

@function -hsv($h, $s, $v, $a) {
    // normalize h to degrees
    $h: math.div(0deg + $h, 1deg);
    $h: $h % 360;

    // normalize s to fractions
    $s: math.div($s, 100%);
    // normalize v to fractions
    $v: math.div($v, 100%);

    // https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB
    $c: $s * $v;
    $h1: math.div($h, 60);
    $x: $c * (1 - math.abs($h1 % 2 - 1));

    $r1: none; $g1: none; $b1: none;
    @if ($h1 < 1) {
        $r1: $c; $g1: $x; $b1: 0;
    } @else if($h1 < 2) {
        $r1: $x; $g1: $c; $b1: 0;
    } @else if($h1 < 3) {
        $r1: 0; $g1: $c; $b1: $x;
    } @else if($h1 < 4) {
        $r1: 0; $g1: $x; $b1: $c;
    } @else if($h1 < 5) {
        $r1: $x; $g1: 0; $b1: $c;
    } @else {
        $r1: $c; $g1: 0; $b1: $x;
    }

    $m: $v - $c;
    $r: math.floor(($r1 + $m) * 255);
    $g: math.floor(($g1 + $m) * 255);
    $b: math.floor(($b1 + $m) * 255);

    @return rgba($r, $g, $b, $a);
}

//
// Unit normalization only happens in lists
//
@function -hsv-normalize($h, $s, $v, $a) {
    @if ($h == none) {
        $h: 0deg;
    }
    @if (math.is-unitless($s)) {
        $s: $s * 1%; // unitless values are percents not fractions
    }
    @if (math.is-unitless($v)) {
        $v: $v * 1%; // unitless values are percents not fractions
    }

    @return -hsv($h, $s, $v, $a);
}

@function -color-list($list, $a: 1) {
    @if (list.length($list) != 3) {
        @error "Color list must contain exactly 3 arguments";
    }

    $list: list.append($list, $a);

    @return -hsv-normalize($list...)
}

@function -alpha-list($list) {
    @if (list.length($list) != 2) {
        @error "Alpha list must contain exactly 2 arguments";
    }

    @return -color-list($list...);
}

@function -resolve-list($list, $a: 1) {
    @if (list.separator($list) == 'slash') {
        @return -alpha-list($list);
    }

    @if (list.separator($list) == space) {
        @return -color-list($list);
    }

    @error "Colors must be a space separated list. Colors with alpha channel must be a slash separated list";
}

@function -resolve-args($alpha-required, $args...) {
    @if (list.length($args) == 1) {
        @return -resolve-list(list.nth($args, 1));
    }

    @if (list.length($args) == 3) {
        @if ($alpha-required) {
            @return -hsv($args...); // let it fail
        } @else {
            $args: list.append($args, 1); // append default
            @return -hsv($args...);
        }
    }

    @return -hsv($args...);
}

// exports

@function hsv($args...) {
    @return -resolve-args(false, $args...)
}

@function hsva($args...) {
    @return -resolve-args(true, $args...)
}

@function hsb($args...) {
    @return hsv($args...);
}

@function hsba($args...) {
    @return hsva($args...);
}
